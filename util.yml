helper:
  dev_branches: (( |b|->.helper.branchset("standard", [ "head" ], b ) ))
  main_branch: (( |b|->.helper.branchset("standard", [ "head", "minor", "pull", "verbatim" ], [ b ] ) ))
  patch_branch: (( |b|->.helper.branchset("standard", [ "head", "patch" ], [ b ] ) ))
  main_patch_branch: (( |b|->.helper.branchset("standard", [ "head", "minor", "pull", "patch", "verbatim" ], [ b ] ) ))

  branchset: (( |n,j,b|-> *.helper.templates.branchset ))

  util:
    notify:
      slack:
        default_channel: 'internal_scp_workspace'
        channel_cfgs:
          internal_scp_workspace:
            channel_name: 'k8s-op-of-the-week'
            slack_cfg_name: 'scp_workspace'
  templates:
    branchset:
      <<: (( &template ))
      branches: (( b ))
      inherit:  (( { .settings.pipeline = eval("*.helper.templates." n) } ))

    jobs:
      head:
        <<: (( &template ))
        head-update:
          traits:
            component_descriptor: ~
      pull:
        <<: (( &template ))
        pull-request:
          traits:
            pull-request: ~
            component_descriptor: ~
      minor:
        <<: (( &template ))
        release:
          traits:
            version:
              preprocess: 'finalize'
            release:
              nextversion: 'bump_minor'
              next_version_callback: '.ci/prepare_release'
              release_callback: '.ci/prepare_release'
            component_descriptor: ~
            <<: (( helper.util.notify )) 

      patch:
        <<: (( &template))
        patch-release:
          traits:
            version:
              preprocess: 'finalize'
            release:
              nextversion: 'bump_patch'
              next_version_callback: '.ci/prepare_release'
              release_callback: '.ci/prepare_release'
            component_descriptor: ~
            <<: (( helper.util.notify )) 
      verbatim:
        <<: (( &template))
        verbatim-release:
          traits:
            version:
              preprocess: 'noop'
            release:
              nextversion: 'noop'
              release_callback: '.ci/prepare_release'
            component_descriptor: ~
            <<: (( helper.util.notify )) 

    standard:
      <<: (( &template ))
      base_definition:
        repo: ~
        traits:
          version:
            preprocess: inject-branch-name
            inject_effective_version: true
          publish:
            dockerimages:
              controller-manager:
                inputs:
                  repos:
                    source: ~ # default
                  steps:
                    build: ~
                registry: 'gcr-readwrite'
                image: (( "eu.gcr.io/gardener-project/dns-controller-manager" ( valid(.settings.repokey) -and .settings.repokey != ""  ? "-" .settings.repokey :"" ) ))
                dockerfile: 'build/Dockerfile'
        steps:
          check:
            image: (( "golang:" .settings.goVersion ))
          test:
            image: (( "golang:" .settings.goVersion ))
          build:
            image: (( "golang:" .settings.goVersion ))
            output_dir: 'binary'
          integrationtest:
            image: (( "golang:" .settings.goVersion ))

      jobs: (( sum[j|{}|s,e|-> s eval("*.helper.templates.jobs." e)] ))
