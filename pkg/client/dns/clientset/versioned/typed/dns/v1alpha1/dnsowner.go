// SPDX-FileCopyrightText: SAP SE or an SAP affiliate company and Gardener contributors
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"

	dnsv1alpha1 "github.com/gardener/external-dns-management/pkg/apis/dns/v1alpha1"
	scheme "github.com/gardener/external-dns-management/pkg/client/dns/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// DNSOwnersGetter has a method to return a DNSOwnerInterface.
// A group's client should implement this interface.
type DNSOwnersGetter interface {
	DNSOwners(namespace string) DNSOwnerInterface
}

// DNSOwnerInterface has methods to work with DNSOwner resources.
type DNSOwnerInterface interface {
	Create(ctx context.Context, dNSOwner *dnsv1alpha1.DNSOwner, opts v1.CreateOptions) (*dnsv1alpha1.DNSOwner, error)
	Update(ctx context.Context, dNSOwner *dnsv1alpha1.DNSOwner, opts v1.UpdateOptions) (*dnsv1alpha1.DNSOwner, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, dNSOwner *dnsv1alpha1.DNSOwner, opts v1.UpdateOptions) (*dnsv1alpha1.DNSOwner, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*dnsv1alpha1.DNSOwner, error)
	List(ctx context.Context, opts v1.ListOptions) (*dnsv1alpha1.DNSOwnerList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *dnsv1alpha1.DNSOwner, err error)
	DNSOwnerExpansion
}

// dNSOwners implements DNSOwnerInterface
type dNSOwners struct {
	*gentype.ClientWithList[*dnsv1alpha1.DNSOwner, *dnsv1alpha1.DNSOwnerList]
}

// newDNSOwners returns a DNSOwners
func newDNSOwners(c *DnsV1alpha1Client, namespace string) *dNSOwners {
	return &dNSOwners{
		gentype.NewClientWithList[*dnsv1alpha1.DNSOwner, *dnsv1alpha1.DNSOwnerList](
			"dnsowners",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *dnsv1alpha1.DNSOwner { return &dnsv1alpha1.DNSOwner{} },
			func() *dnsv1alpha1.DNSOwnerList { return &dnsv1alpha1.DNSOwnerList{} },
		),
	}
}
