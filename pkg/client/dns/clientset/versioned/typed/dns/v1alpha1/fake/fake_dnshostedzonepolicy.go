// SPDX-FileCopyrightText: SAP SE or an SAP affiliate company and Gardener contributors
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/gardener/external-dns-management/pkg/apis/dns/v1alpha1"
	dnsv1alpha1 "github.com/gardener/external-dns-management/pkg/client/dns/clientset/versioned/typed/dns/v1alpha1"
	gentype "k8s.io/client-go/gentype"
)

// fakeDNSHostedZonePolicies implements DNSHostedZonePolicyInterface
type fakeDNSHostedZonePolicies struct {
	*gentype.FakeClientWithList[*v1alpha1.DNSHostedZonePolicy, *v1alpha1.DNSHostedZonePolicyList]
	Fake *FakeDnsV1alpha1
}

func newFakeDNSHostedZonePolicies(fake *FakeDnsV1alpha1, namespace string) dnsv1alpha1.DNSHostedZonePolicyInterface {
	return &fakeDNSHostedZonePolicies{
		gentype.NewFakeClientWithList[*v1alpha1.DNSHostedZonePolicy, *v1alpha1.DNSHostedZonePolicyList](
			fake.Fake,
			namespace,
			v1alpha1.SchemeGroupVersion.WithResource("dnshostedzonepolicies"),
			v1alpha1.SchemeGroupVersion.WithKind("DNSHostedZonePolicy"),
			func() *v1alpha1.DNSHostedZonePolicy { return &v1alpha1.DNSHostedZonePolicy{} },
			func() *v1alpha1.DNSHostedZonePolicyList { return &v1alpha1.DNSHostedZonePolicyList{} },
			func(dst, src *v1alpha1.DNSHostedZonePolicyList) { dst.ListMeta = src.ListMeta },
			func(list *v1alpha1.DNSHostedZonePolicyList) []*v1alpha1.DNSHostedZonePolicy {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1alpha1.DNSHostedZonePolicyList, items []*v1alpha1.DNSHostedZonePolicy) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
