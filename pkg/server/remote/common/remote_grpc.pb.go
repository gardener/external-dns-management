// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package common

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RemoteProviderClient is the client API for RemoteProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteProviderClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	GetZones(ctx context.Context, in *GetZonesRequest, opts ...grpc.CallOption) (*Zones, error)
	GetZoneState(ctx context.Context, in *GetZoneStateRequest, opts ...grpc.CallOption) (*ZoneState, error)
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error)
}

type remoteProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteProviderClient(cc grpc.ClientConnInterface) RemoteProviderClient {
	return &remoteProviderClient{cc}
}

func (c *remoteProviderClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/remote.RemoteProvider/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteProviderClient) GetZones(ctx context.Context, in *GetZonesRequest, opts ...grpc.CallOption) (*Zones, error) {
	out := new(Zones)
	err := c.cc.Invoke(ctx, "/remote.RemoteProvider/GetZones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteProviderClient) GetZoneState(ctx context.Context, in *GetZoneStateRequest, opts ...grpc.CallOption) (*ZoneState, error) {
	out := new(ZoneState)
	err := c.cc.Invoke(ctx, "/remote.RemoteProvider/GetZoneState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteProviderClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error) {
	out := new(ExecuteResponse)
	err := c.cc.Invoke(ctx, "/remote.RemoteProvider/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteProviderServer is the server API for RemoteProvider service.
// All implementations must embed UnimplementedRemoteProviderServer
// for forward compatibility
type RemoteProviderServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	GetZones(context.Context, *GetZonesRequest) (*Zones, error)
	GetZoneState(context.Context, *GetZoneStateRequest) (*ZoneState, error)
	Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error)
	mustEmbedUnimplementedRemoteProviderServer()
}

// UnimplementedRemoteProviderServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteProviderServer struct {
}

func (UnimplementedRemoteProviderServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedRemoteProviderServer) GetZones(context.Context, *GetZonesRequest) (*Zones, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetZones not implemented")
}
func (UnimplementedRemoteProviderServer) GetZoneState(context.Context, *GetZoneStateRequest) (*ZoneState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetZoneState not implemented")
}
func (UnimplementedRemoteProviderServer) Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedRemoteProviderServer) mustEmbedUnimplementedRemoteProviderServer() {}

// UnsafeRemoteProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteProviderServer will
// result in compilation errors.
type UnsafeRemoteProviderServer interface {
	mustEmbedUnimplementedRemoteProviderServer()
}

func RegisterRemoteProviderServer(s grpc.ServiceRegistrar, srv RemoteProviderServer) {
	s.RegisterService(&RemoteProvider_ServiceDesc, srv)
}

func _RemoteProvider_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteProviderServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.RemoteProvider/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteProviderServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteProvider_GetZones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetZonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteProviderServer).GetZones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.RemoteProvider/GetZones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteProviderServer).GetZones(ctx, req.(*GetZonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteProvider_GetZoneState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetZoneStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteProviderServer).GetZoneState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.RemoteProvider/GetZoneState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteProviderServer).GetZoneState(ctx, req.(*GetZoneStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteProvider_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteProviderServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.RemoteProvider/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteProviderServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RemoteProvider_ServiceDesc is the grpc.ServiceDesc for RemoteProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "remote.RemoteProvider",
	HandlerType: (*RemoteProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _RemoteProvider_Login_Handler,
		},
		{
			MethodName: "GetZones",
			Handler:    _RemoteProvider_GetZones_Handler,
		},
		{
			MethodName: "GetZoneState",
			Handler:    _RemoteProvider_GetZoneState_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _RemoteProvider_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/server/remote/common/remote.proto",
}
